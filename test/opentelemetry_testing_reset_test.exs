defmodule OpentelemetryTestingResetTest do
  use ExUnit.Case, async: false

  test "OpentelemetryTesting.reset/1 removes all collected spans" do
    ## span_name is much longer than the names generated by SpanTreeGenerator
    span_name = elem(__ENV__.function, 0)
    span_tree_input_data = {%{name: span_name}, [{%{name: span_name}, []}]}
    {%{span_id: span_id}, _} = SpanTreeBuilder.generate_span_tree(span_tree_input_data, & &1)
    assert {:ok, %{}} = OpentelemetryTesting.wait_for_span(:_, span_id, 300)

    ## we have 2 spans with this span name
    assert [%{name: span_name}, %{name: span_name}] =
             OpentelemetryTesting.get_spans_by_name(span_name)

    OpentelemetryTesting.reset()

    ## after resetting we have no spans with this span name
    assert [] == OpentelemetryTesting.get_spans_by_name(span_name)
  end

  test "OpentelemetryTesting.wait_for_span/3 returns errors" do
    OpentelemetryTesting.reset()

    ## we have no spans in the ETS table
    assert {:error, :timeout} == OpentelemetryTesting.wait_for_span(:_, :_, 0)

    assert_raise RuntimeError,
                 ~r"Elixir.OpentelemetryTesting.wait_for_span!/3:.*:timeout"s,
                 fn -> OpentelemetryTesting.wait_for_span!(:_, :_, 0) end
  end

  test "OpentelemetryTesting.build_span_tree/2 returns errors" do
    OpentelemetryTesting.reset()

    ## we have no spans in the ETS table
    assert {:error, :not_found} == OpentelemetryTesting.build_span_tree(:_, :_)

    assert_raise RuntimeError,
                 ~r"Elixir.OpentelemetryTesting.build_span_tree!/2:.*:not_found"s,
                 fn -> OpentelemetryTesting.build_span_tree!(:_, :_) end
  end

  test "OpentelemetryTesting.get_span_ids_by_name/1 returns errors" do
    OpentelemetryTesting.reset()

    ## we have no spans in the ETS table
    assert {:error, :not_found} == OpentelemetryTesting.get_span_ids_by_name("any name")

    assert_raise RuntimeError,
                 ~r"Elixir.OpentelemetryTesting.get_span_ids_by_name!/1:.*:not_found"s,
                 fn -> OpentelemetryTesting.get_span_ids_by_name!("any name") end
  end
end
